# application.yml 
--- 
spring: 
  application: 
    name: ricette-seguite
  cloud:
    consul:
      host: localhost
      port: 8500
      discovery: 
        instanceId: ${spring.application.name}-${spring.cloud.client.hostname}-${random.value}
        healthCheckPath: /actuator/health
        healthCheckInterval: 10s
        # configurazione per effettuare esprimenti, NON USARE UN PRODUZIONE 
        # dopo quanto tempo consul deve smettere di restituire servizi che non rispondono all'health check? 
        healthCheckCriticalTimeout: 60s
        # consul deve restituire solo servizi che passano l'health check (default=false) 
        queryPassing: true 
    loadbalancer: 
      ribbon.enabled: false 

server: 
  port: ${PORT:${SERVER_PORT:0}}
#  port: 8080

# MESSAGING 
asw.kafka.producer.name: Consumer
asw.kafka.producer.messages-to-send: 10
asw.kafka.channel.alpha: instagnam-alpha
asw.kafka.channel.beta: instagnam-beta
asw.kafka.groupid: simple



# KAFKA
#spring.kafka.bootstrap-servers: ${DOCKER_HOST_IP:10.11.1.121}:9092
spring.kafka.bootstrap-servers: 127.0.0.1:9092
spring.kafka.consumer.group-id: ${asw.kafka.groupid}
#spring.kafka.consumer.auto-offset-reset: earliest
spring.kafka.consumer.auto-offset-reset: latest
spring.kafka.consumer.key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
#spring.kafka.consumer.properties.spring.json.trusted.packages: asw.instagnam.ricetteseguite.domain, asw.instagnam.ricetteseguite.domain.RicettaCreatedEvent, asw.instagnam.ricette.messagepublisher, asw.instagnam.ricette.messagepublisher.RicettaCreatedEvent
